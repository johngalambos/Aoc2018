// this is definitely a tree structure

// we need to insert things at the root if necessary

// trees have nodes, and leaves

// we need to create an immutable tree structure

// we need to find the unique set of steps, and the understand the relationships between them

// we have a collection of rules which we want to build into a tree

// the root, or roots, (which could be possible are the nodes with no duplicates

open System.Text.RegularExpressions

type Step =
  { Id: char
    Leaves: Node list }

type Rule =
  { Id: char
    Parent: Id }

// let input = @"C:\Users\john\code\Aoc2018\Day7\input.txt"
let input = @"C:\Users\john\code\Aoc2018\Day7\sampleInput.txt"

let parseRuleFromText text =
  let result = Regex.Match(text, "^Step (.) must be finished before step (.) can begin.$")
  { Id = result.Groups.[2].Value.ToCharArray().[0]
    Parent = result.Groups.[1].Value.ToCharArray().[0] }


parseRuleFromText "Step C must be finished before step A can begin."


// get a seq of rules from the file
let rules =
  System.IO.File.ReadLines(input)
  |> Seq.map Regex.Match(s, "\d+").Value |> int

